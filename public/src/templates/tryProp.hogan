
        <div id="propertiesModal" class="modal fade">
          <div class="modal-lg">
            <div class="modal-content">
              <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title"><b>{{label}}</b> Properties</h4>
              </div>
              <div class="modal-body">


<script>
$(document).ready(function() {

	$("#{{shapeID}}_with_paramsTable").html("").show();
	$("#{{shapeID}}_using_paramsTable").html("").show();

        {{#paramList}}
        $("#{{paramID}}_text").val('{{{paramValue}}}');
        {{/paramList}}

var w =  $('#propertiesModal').innerWidth();
console.log("computed width: " + w);
// This is a really wierd hack but we don't get
// the exact width of modal or form here.
w = (w/4)-30;
console.log("computed width/2: " + w);
console.log("form width: " + $('form').innerWidth());


$("#{{shapeID}}_with_paramsTable").show().handsontable({
                data: getParsedWithData(),
stretchH: 'all',
                minRows: 1,
                manualColumnResize: true,
                rowHeaders: false,
                minSpareRows: 1,
                colHeaders: ["Field Name", "Field Value"],
                afterChange: function(array, source) {
                    if (array !== null) {
                        var data = this.getData();
                        var final = "";

                        if (data !== null) {

                            for (var i = 0; i < data.length; i++) {
                                if (data[i].fieldName !== null && data[i].fieldValue !== null) {
                                    if (final.length > 0) { final = final + ", "; }

                                    final = final + data[i].fieldName + " " + data[i].fieldValue;
                                }
                            }
                        }
                        $('#{{shapeID}}_with_text').val(final);
                        app.updateFigureParameter("with", final);
                    }
                },
                columns: [{data: "fieldName"}, {data: "fieldValue", renderer: italicRenderer}]
            });


$("#{{shapeID}}_using_paramsTable").show().handsontable({
                data: getParsedUsingData(),
                minRows: 1,
colWidths: [w, w],
                manualColumnResize: true,
                rowHeaders: false,
                minSpareRows: 1,
                colHeaders: ["Parameter Name", " Parameter Value"],
                afterChange: function(array, source) {
                    if (array !== null) {
                        var data = this.getData();
                        var final = "";

                        if (data !== null) {

                            for (var i = 0; i < data.length; i++) {
                                if (data[i].param !== null && data[i].value !== null) {
                                    if (final.length > 0) { final = final + ", "; }

                                    final = final + data[i].param + " = " + data[i].value;
                                }
                            }
                        }
                        $('#{{shapeID}}_using_text').val(final);
                        app.updateFigureParameter("using", final);
                    }
                },
                columns: [{data: "param", renderer: italicRenderer}, {data: "value"}]
	    	});

console.log("at end: " + $('#{{shapeID}}_using_paramsTable').outerWidth());
console.log("at end text: " + $('#{{shapeID}}_using_text').outerWidth());

});


function italicRenderer(instance, td, row, col, prop, value, cellProperties) {
Handsontable.renderers.TextRenderer.apply(this, arguments);
  $(td).css({
    "font-style": "italic",
	"color": '#777'
  });

        }

        
        function getParsedWithData() {
            var val = $('#{{shapeID}}_with_text').val();
            var data = [];

            if (val !== undefined) {
                var dataArr = val.trim().split(',');
                for (var i = 0; i < dataArr.length; i++) {
                    var temp = {};
                    var current = dataArr[i].trim().split(' ');
                    temp["fieldName"] = current[0];
                    temp["fieldValue"] = current[1];
                    data.push(temp);
                }
            }
            return data;

        }

        function withChanged() {
            var val = $('#{{shapeID}}_with_text').val();
            if (val !== undefined) {
                app.updateFigureParameter("with", val);
                $('#{{shapeID}}_with_paramsTable').handsontable('loadData', getParsedWithData());
            }
        }


        function getParsedUsingData() {
            var val = $('#{{shapeID}}_using_text').val();
            var data = [];

            if (val !== undefined) {
                var dataArr = val.trim().replace(/,[^(?:\",\")]/g, '\u000B').split('\u000B');

                for (var i = 0; i < dataArr.length; i++) {
                    var temp = {};
                    var current = dataArr[i].trim().split('=');
                    temp["param"] = current[0];
                    temp["value"] = current[1];
                    data.push(temp);
                }
            }
            return data;
        }


        function usingChanged() {

            var val = $('#{{shapeID}}_using_text').val();
            if (val !== undefined) {
                app.updateFigureParameter("using", val);
                $('#{{shapeID}}_using_paramsTable').handsontable('loadData', getParsedUsingData());
            }

        }


        function commentChanged() {

            var val = $('#{{shapeID}}_comment_text').val();
            if (val !== undefined) {
                val = val.replace(/\n/g, '\\n');
                app.updateFigureParameter("comment", val);
            }
        }
    </script>
<form id="{{shapeID}}_form" role='form'>
    <br>
<!--    <div class='col-sm-10' id='{{shapeID}}_div_text'> -->

        <!-- 'with' parameter section -->
        <div id='{{shapeID}}_with_div' class='form-group'>
            <label for='{{shapeID}}_with_radio'>with</label>
            <input id='{{shapeID}}_with_text' class='form-control' name='with' type='text' value='' onchange="withChanged()" placeholder="You can directly enter all values here..." />
			<br>
			<div id='{{shapeID}}_with_paramsTable' class="handsontable"></div>
        </div>
        <br>

        <!-- 'using' parameter section -->
        <div id='{{shapeID}}_using_div' class='form-group'>
			<label for='{{shapeID}}_using_label'>using</label>
           	<input id='{{shapeID}}_using_text' class='form-control' name='using' type='text' value='' onchange="usingChanged()" placeholder="You can directly enter all values here..." />
			<br>
			<div id='{{shapeID}}_using_paramsTable' class="handsontable" style="width:100%"></div>
        </div>
        <br>

        <!-- 'comment' parameter section -->
        <div id='{{shapeID}}_comment_div' class='form-group'>
			<label for='{{shapeID}}_comment_radio'>comment</label>
            <textarea id='{{shapeID}}_comment_text' class='form-control' name='comment' value='' onchange="commentChanged()" placeholder="Comment goes here..." rows="3"></textarea>
        </div>

<br />

</form>





              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
              </div>
            </div><!-- /.modal-content -->
          </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->



	















