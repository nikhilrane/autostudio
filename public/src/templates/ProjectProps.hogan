<div id="propertiesModal" class="modal fade">
    <div class="modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title"><b>{{label}}</b> Properties</h4>
            </div>
            <div class="modal-body">


                <script>
                    $(document).ready(function() {

		                $("#{{shapeID}}_generate_paramsTable").html("").show();

		                {{#paramList}}
			                $("#{{paramID}}_text").val('{{{paramValue}}}'); 
						{{/paramList}}

						var w =  $('#propertiesModal').innerWidth();

						// This is a really wierd hack but we don't get
						// the exact width of modal or form here.
						w = (w/4)-30;


						$("#{{shapeID}}_generate_paramsTable").show().handsontable({
							data: getParsedGenerateData(),
							minRows: 1,
							colWidths: [w, w],
						    manualColumnResize: true,
						    rowHeaders: false,
						    minSpareRows: 1,
						    colHeaders: ["Expression", "Alias"],
						    afterChange: function(array, source) {
						        if (array !== null) {
						            var data = this.getData();
						            var final = "";

						            if (data !== null) {

						                for (var i = 0; i < data.length; i++) {
                                            console.log("data[i]: " + JSON.stringify(data[i]));

						                    if (data[i].expName !== undefined && data[i].expName !== null) {
						                        if (final.length > 0) { final = final + ", "; }

						                        final = final + data[i].expName;
												if(data[i].expAlias !== undefined && data[i].expAlias !== null) {
						                        	final = final + " as " + data[i].expAlias;
												}
						                    }
						                }
						            }
                                    console.log("final: " + final);
						            $('#{{shapeID}}_generate_text ').val(final);
						            app.updateFigureParameter("generate", final);
						        }
						    },
						    columns: [{data: "expName"}, {data: "expAlias", renderer: italicRenderer}]
				    	});

					});


					function italicRenderer(instance, td, row, col, prop, value, cellProperties) {
						Handsontable.renderers.TextRenderer.apply(this, arguments);
						$(td).css({
							"font-style": "italic",
							"color": "#777"
						});

					}

        
					function getParsedGenerateData() {
						var val = $('#{{shapeID}}_generate_text').val();
                        var data = [];

                        if (val !== undefined && val !== null && val.trim().length > 0) {
                            var dataArr = val.trim().replace(/ as /g, " ").split(',');
                            for (var i = 0; i < dataArr.length; i++) {
                                var temp = {};
                                var current = dataArr[i].trim().split(' ');
                                temp["expName"] = current[0];
                                temp["expAlias"] = current[1];
                                data.push(temp);
                            }
                        }
                        return data;

                    }

                    function generateChanged() {
                        var val = $('#{{shapeID}}_generate_text').val();
                        if (val !== undefined && val !== null && val.trim().length > 0) {
                            app.updateFigureParameter("generate", val);
                            $('#{{shapeID}}_generate_paramsTable').handsontable('loadData', getParsedGenerateData());
                        }
                    }


                    function commentChanged() {

                        var val = $('#{{shapeID}}_comment_text').val();
                        if (val !== undefined && val !== null && val.trim().length > 0) {
                            val = val.replace(/\n/g, '\\n');
                            app.updateFigureParameter("comment", val);
                        }
                    }
                </script>
                <form id="{{shapeID}}_form" role='form'>
                    <br>

                    <!-- 'generate' parameter section -->
                    <div id='{{shapeID}}_generate_div' class='form-group'>
                        <label for='{{shapeID}}_generate_label'>generate</label>
                        <input id='{{shapeID}}_generate_text' class='form-control' name='generate' type='text' value='' onchange="generateChanged()" placeholder="You can directly enter all values here..." />
                        <br>
                        <div id='{{shapeID}}_generate_paramsTable' class="handsontable"></div>
                    </div>
                    <br>

                    <!-- 'comment' parameter section -->
                    <div id='{{shapeID}}_comment_div' class='form-group'>
                        <label for='{{shapeID}}_comment_label'>comment</label>
                        <textarea id='{{shapeID}}_comment_text' class='form-control' name='comment' value='' onchange="commentChanged()" placeholder="Comment goes here..." rows="3"></textarea>
                    </div>
                    <br />

                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->